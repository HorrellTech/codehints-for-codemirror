// Keywords configuration for CodeHint
// Format: [keyword, signature, parameter descriptions, function description]
// This file can be easily customized with your own keywords
var defaultKeywords = [
  ['console.log', 'console.log(message)', ['message: Any value to output to console'], 'Outputs a message to the console'],
  ['function', 'function functionName(parameters)', ['functionName: Name of the function', 'parameters: Function parameters'], 'Declares a function'],
  ['if', 'if (condition)', ['condition: Boolean expression to evaluate'], 'Executes code conditionally'],
  ['for', 'for (init; condition; increment)', ['init: Initial expression', 'condition: Loop condition', 'increment: Increment expression'], 'Creates a for loop'],
  ['while', 'while (condition)', ['condition: Boolean expression to evaluate'], 'Creates a while loop'],
  ['return', 'return value', ['value: Value to return from function'], 'Returns a value from a function'],
  ['let', 'let variableName = value', ['variableName: Name of the variable', 'value: Initial value'], 'Declares a block-scoped variable'],
  ['const', 'const variableName = value', ['variableName: Name of the constant', 'value: Constant value'], 'Declares a block-scoped constant'],
  ['var', 'var variableName = value', ['variableName: Name of the variable', 'value: Initial value'], 'Declares a function-scoped variable'],
  ['try', 'try { ... } catch (error) { ... }', ['code block: Code to try', 'error: Error object'], 'Handles exceptions'],
  ['catch', 'catch (error)', ['error: Error object to handle'], 'Catches exceptions from try block'],
  ['throw', 'throw error', ['error: Error to throw'], 'Throws an exception'],
  ['async', 'async function functionName()', ['functionName: Name of async function'], 'Declares an asynchronous function'],
  ['await', 'await promise', ['promise: Promise to wait for'], 'Waits for a promise to resolve'],
  ['class', 'class ClassName { ... }', ['ClassName: Name of the class'], 'Declares a class'],
  ['constructor', 'constructor(parameters)', ['parameters: Constructor parameters'], 'Class constructor method'],
  ['import', 'import { item } from "module"', ['item: Item to import', 'module: Module to import from'], 'Imports from a module'],
  ['export', 'export default value', ['value: Value to export'], 'Exports a value from module'],
  ['switch', 'switch (expression)', ['expression: Expression to evaluate'], 'Creates a switch statement'],
  ['case', 'case value:', ['value: Case value to match'], 'Defines a case in switch statement'],
  ['break', 'break', [], 'Breaks out of loop or switch'],
  ['continue', 'continue', [], 'Continues to next iteration of loop'],
  ['Array', 'new Array(length)', ['length: Initial array length'], 'Creates a new array'],
  ['Object', 'new Object()', [], 'Creates a new object'],
  ['String', 'new String(value)', ['value: String value'], 'Creates a new string object'],
  ['Number', 'new Number(value)', ['value: Numeric value'], 'Creates a new number object'],
  ['Boolean', 'new Boolean(value)', ['value: Boolean value'], 'Creates a new boolean object'],
  ['Date', 'new Date()', [], 'Creates a new date object'],
  ['RegExp', 'new RegExp(pattern, flags)', ['pattern: Regular expression pattern', 'flags: Regular expression flags'], 'Creates a new regular expression'],
  ['Promise', 'new Promise((resolve, reject) => {})', ['resolve: Resolve function', 'reject: Reject function'], 'Creates a new promise'],
  ['setTimeout', 'setTimeout(callback, delay)', ['callback: Function to execute', 'delay: Delay in milliseconds'], 'Executes function after delay'],
  ['setInterval', 'setInterval(callback, interval)', ['callback: Function to execute', 'interval: Interval in milliseconds'], 'Executes function repeatedly'],
  ['clearTimeout', 'clearTimeout(timeoutId)', ['timeoutId: Timeout ID to clear'], 'Clears a timeout'],
  ['clearInterval', 'clearInterval(intervalId)', ['intervalId: Interval ID to clear'], 'Clears an interval'],
  ['JSON.parse', 'JSON.parse(text)', ['text: JSON string to parse'], 'Parses JSON string'],
  ['JSON.stringify', 'JSON.stringify(value, replacer, space)', ['value: Value to stringify', 'replacer: Optional replacer function', 'space: Optional spacing'], 'Converts value to JSON string'],
  ['Math.random', 'Math.random()', [], 'Returns random number between 0 and 1'],
  ['Math.floor', 'Math.floor(number)', ['number: Number to floor'], 'Returns largest integer less than or equal to number'],
  ['Math.ceil', 'Math.ceil(number)', ['number: Number to ceil'], 'Returns smallest integer greater than or equal to number'],
  ['Math.round', 'Math.round(number)', ['number: Number to round'], 'Returns number rounded to nearest integer'],
  ['Math.max', 'Math.max(value1, value2, ...)', ['value1, value2, ...: Numbers to compare'], 'Returns largest of given numbers'],
  ['Math.min', 'Math.min(value1, value2, ...)', ['value1, value2, ...: Numbers to compare'], 'Returns smallest of given numbers'],
  ['parseInt', 'parseInt(string, radix)', ['string: String to parse', 'radix: Optional number base'], 'Parses string and returns integer'],
  ['parseFloat', 'parseFloat(string)', ['string: String to parse'], 'Parses string and returns floating point number'],
  ['isNaN', 'isNaN(value)', ['value: Value to check'], 'Checks if value is NaN'],
  ['isFinite', 'isFinite(value)', ['value: Value to check'], 'Checks if value is finite number'],
  ['typeof', 'typeof value', ['value: Value to check type of'], 'Returns type of value as string'],
  ['instanceof', 'object instanceof Constructor', ['object: Object to check', 'Constructor: Constructor function'], 'Checks if object is instance of constructor'],
  ['delete', 'delete object.property', ['object: Object to delete from', 'property: Property to delete'], 'Deletes property from object'],
  ['in', 'property in object', ['property: Property to check for', 'object: Object to check in'], 'Checks if property exists in object'],
  ['this', 'this', [], 'References current object context'],
  ['super', 'super()', [], 'References parent class constructor or methods'],
  ['static', 'static methodName()', ['methodName: Name of static method'], 'Declares static class method'],
  ['extends', 'class ChildClass extends ParentClass', ['ChildClass: Name of child class', 'ParentClass: Name of parent class'], 'Extends a parent class'],
  ['implements', 'class ClassName implements Interface', ['ClassName: Name of class', 'Interface: Interface to implement'], 'Implements an interface'],
  ['interface', 'interface InterfaceName { ... }', ['InterfaceName: Name of interface'], 'Declares an interface (TypeScript)'],
  ['type', 'type TypeName = type', ['TypeName: Name of type', 'type: Type definition'], 'Declares a type alias (TypeScript)'],
  ['enum', 'enum EnumName { ... }', ['EnumName: Name of enum'], 'Declares an enumeration (TypeScript)'],
  ['namespace', 'namespace NamespaceName { ... }', ['NamespaceName: Name of namespace'], 'Declares a namespace (TypeScript)'],
  ['module', 'module ModuleName { ... }', ['ModuleName: Name of module'], 'Declares a module (TypeScript)'],
  ['declare', 'declare var variableName: type', ['variableName: Name of variable', 'type: Variable type'], 'Declares ambient variable (TypeScript)'],
  ['public', 'public propertyName', ['propertyName: Name of property'], 'Declares public class member (TypeScript)'],
  ['private', 'private propertyName', ['propertyName: Name of property'], 'Declares private class member (TypeScript)'],
  ['protected', 'protected propertyName', ['propertyName: Name of property'], 'Declares protected class member (TypeScript)'],
  ['readonly', 'readonly propertyName', ['propertyName: Name of property'], 'Declares readonly property (TypeScript)'],
  ['abstract', 'abstract methodName()', ['methodName: Name of abstract method'], 'Declares abstract method (TypeScript)'],
  ['override', 'override methodName()', ['methodName: Name of method to override'], 'Overrides parent method (TypeScript)']
];

// Make keywords available globally
if (typeof window !== 'undefined') {
    window.defaultKeywords = defaultKeywords;
}
